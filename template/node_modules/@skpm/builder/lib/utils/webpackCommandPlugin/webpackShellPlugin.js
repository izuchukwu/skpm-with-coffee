'use strict';

exports.__esModule = true;
exports.sketchtoolRunCommand = sketchtoolRunCommand;
exports.default = WebpackShellPlugin;

var _toolConfig = require('@skpm/utils/tool-config');

var _exec = require('@skpm/utils/exec');

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const config = (0, _toolConfig.get)();

function sketchtoolRunCommand(output, commandIdentifier, withoutActivating) {
  let command = `"${config.sketchPath}/Contents/Resources/sketchtool/bin/sketchtool" run "${output}" "${commandIdentifier}"`;

  if (withoutActivating) {
    command += ' --without-activating';
  }

  const handleError =
  // check if the run command doesn't exist
  'if (echo "$res" | grep "Unknown command ‘run’"); then ' + 'echo "Only available on Sketch 43+"; ' +
  // check if we can't find sketch
  'elif (echo "$res" | grep "such file or directory"); then ' + 'echo "Looks like we can\'t find Sketch.app.\\nYou can specify where to look for it by running:\\n\\necho \\"sketchPath: ABSOLUTE/PATH/TO/Sketch.app\\" > ~/.skpmrc"; ' +
  // not sure why else doesn't work
  'elif (true); then ' + 'echo "$res"; ' + 'fi';

  // run the command and redirect the stderr to stdout so that we can check against it
  return `res=$(${command} 2>&1); ${handleError}`;
}

function WebpackShellPlugin(options) {
  return {
    apply(compiler) {
      compiler.plugin('after-emit', (compilation, callback) => {
        if (options.script) {
          (0, _exec.exec)(options.script, { shell: '/bin/bash' }).then(res => {
            if (res.stderr) {
              console.error(`${_chalk2.default.red('error')} Error while running the command after build`);
              console.error(res.stderr);
            }
            if (res.stdout.trim().length > 0) {
              res.stdout.trim().split('\n').forEach(line => {
                console.log(line);
              });
            }
          }).then(callback).catch(err => {
            console.error(`${_chalk2.default.red('error')} Error while running the command after build`);
            console.error(err);
            callback();
          });
        } else {
          callback();
        }
      });
    }
  };
}