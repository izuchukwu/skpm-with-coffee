'use strict';

exports.__esModule = true;

var _toolConfig = require('@skpm/utils/tool-config');

var _exec = require('@skpm/utils/exec');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const config = (0, _toolConfig.get)();

const regex = /sketchtool Version ((\d|\.)+) \(\d+\)/;
function extractVersion(string) {
  return regex.exec(string)[1];
}

let CACHED_VERSION;

function getSketchVersion() {
  return (0, _exec.execFile)(_path2.default.join(config.sketchPath, '/Contents/Resources/sketchtool/bin/sketchtool'), ['-v']).then(({ stdout }) => {
    let version = extractVersion(stdout);
    const pointNumbers = version.split('.').length;
    if (pointNumbers === 1) {
      version += '.0.0';
    } else if (pointNumbers === 2) {
      version += '.0';
    }
    return version;
  }).catch(() => undefined);
}

exports.default = (() => {
  var _ref = _asyncToGenerator(function* () {
    if (CACHED_VERSION) {
      return CACHED_VERSION;
    }
    const version = yield getSketchVersion();
    CACHED_VERSION = version;
    return version;
  });

  function getSketchVersionWithCache() {
    return _ref.apply(this, arguments);
  }

  return getSketchVersionWithCache;
})();