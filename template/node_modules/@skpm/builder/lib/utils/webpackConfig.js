'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

let getCommands = (() => {
  var _ref = _asyncToGenerator(function* (output, commandIdentifiers) {
    return Promise.all(commandIdentifiers.map(function (commandIdentifier) {
      return (0, _webpackCommandPlugin2.default)(output, commandIdentifier);
    }));
  });

  return function getCommands(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

exports.default = getWebpackConfig;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _webpackCommandPlugin = require('./webpackCommandPlugin');

var _webpackCommandPlugin2 = _interopRequireDefault(_webpackCommandPlugin);

var _webpackHeaderFooterPlugin = require('./webpackHeaderFooterPlugin');

var _webpackHeaderFooterPlugin2 = _interopRequireDefault(_webpackHeaderFooterPlugin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const header = `var that = this;
function run (key, context) {
  that.context = context;
`;
// exports is defined here by webpack
const footer = definedKeys => `  if (key === 'default' && typeof exports === 'function') {
    exports(context);
  } else {
    exports[key](context);
  }
}
${definedKeys.map(k => {
  if (k === 'onRun') {
    return `that['${k}'] = run.bind(this, 'default')`;
  }
  return `that['${k}'] = run.bind(this, '${k}')`;
}).join(';\n')}
`;

function babelLoader(userDefinedBabelConfig) {
  return {
    test: /\.jsx?$/,
    exclude: /node_modules/,
    use: {
      loader: 'babel-loader',
      options: _extends({
        babelrc: false,
        presets: [require('babel-preset-airbnb')]
      }, userDefinedBabelConfig || {})
    }
  };
}

const staticResourceLoader = {
  test: /\.(jpg|png|gif|css|html|svg|sh|py)$/,
  use: {
    loader: '@skpm/file-loader',
    query: {
      raw: true,
      outputPath(url) {
        return _path2.default.join('..', 'Resources', '_webpack_resources', url);
      },
      publicPath(url) {
        return `"file://" + context.plugin.urlForResourceNamed("${url.split('../Resources/')[1]}").path()`;
      }
    }
  }
};

function getWebpackConfig(argv, output, manifestFolder, skpmConfig) {
  let userDefinedWebpackConfig;
  try {
    if (_fs2.default.existsSync(_path2.default.join(process.cwd(), 'webpack.skpm.config.js'))) {
      userDefinedWebpackConfig = require(_path2.default.join(process.cwd(), 'webpack.skpm.config.js'));
    }
  } catch (err) {
    console.error(`${_chalk2.default.red('error')} Error while reading webpack.skpm.config.js`);
    console.error(err);
    process.exit(1);
  }

  const babelrcPath = _path2.default.join(process.cwd(), '.babelrc');
  let userDefinedBabelConfig = null;
  try {
    if (_fs2.default.existsSync(babelrcPath)) {
      userDefinedBabelConfig = JSON.parse(_fs2.default.readFileSync(babelrcPath, 'utf8'));
    } else if (skpmConfig.babel) {
      userDefinedBabelConfig = skpmConfig.babel;
    }
  } catch (err) {
    console.error(`${_chalk2.default.red('error')} Error while reading babelrc`);
    console.error(err);
    process.exit(1);
  }

  return (() => {
    var _ref2 = _asyncToGenerator(function* (file, commandIdentifiers, commandHandlers) {
      const basename = _path2.default.basename(file);

      let plugins = [];

      if (commandIdentifiers) {
        plugins.push(new _webpack2.default.ProvidePlugin({
          console: require.resolve('sketch-polyfill-console'),
          fetch: require.resolve('sketch-polyfill-fetch'),
          setTimeout: [require.resolve('sketch-polyfill-settimeout'), 'setTimeout'],
          clearTimeout: [require.resolve('sketch-polyfill-settimeout'), 'clearTimeout'],
          setInterval: [require.resolve('sketch-polyfill-setinterval'), 'setInterval'],
          clearInterval: [require.resolve('sketch-polyfill-setinterval'), 'clearInterval']
        }), new _webpackHeaderFooterPlugin2.default(header, footer(commandHandlers)));
      }

      if (argv.run && commandIdentifiers) {
        plugins = plugins.concat((yield getCommands(output, commandIdentifiers)));
      }

      const webpackConfig = {
        module: {
          rules: [staticResourceLoader, babelLoader(userDefinedBabelConfig)]
        },
        resolve: {
          extensions: ['.sketch.js', '.js'],
          modules: ['node_modules', _path2.default.join(__dirname, '..', '..', 'node_modules')]
        },
        resolveLoader: {
          modules: ['node_modules', _path2.default.join(__dirname, '..', '..', 'node_modules')]
        },
        entry: _path2.default.join(commandIdentifiers ? manifestFolder : process.cwd(), file),
        output: {
          filename: basename,
          library: commandIdentifiers ? 'exports' : undefined,
          path: commandIdentifiers ? _path2.default.join(output, 'Contents', 'Sketch') : _path2.default.join(output, 'Contents', 'Resources')
        },
        plugins
      };

      if (userDefinedWebpackConfig) {
        yield userDefinedWebpackConfig(webpackConfig, !!commandIdentifiers);
      }

      return webpackConfig;
    });

    function webpackConfigGenerator(_x3, _x4, _x5) {
      return _ref2.apply(this, arguments);
    }

    return webpackConfigGenerator;
  })();
}